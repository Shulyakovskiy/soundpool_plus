use std::io::{self};
use std::path::Path;
use std::process::{Command, Output};

fn main() {
    println!("cargo:warning=Running build.rs...");
    println!("Running build.rs");

    let crate_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap();
    let crate_dir = Path::new(&crate_dir).clone();

    let config = cbindgen::Config {
        language: cbindgen::Language::C,

        ..Default::default()
    };
    cbindgen::Builder::new()
        .with_crate(crate_dir.clone())
        .with_config(config)
        .with_documentation(true)
        .with_autogen_warning(String::from(
            "/// This file was autogenerated. Do not edit!",
        ))
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("target/bindings.h");

    let crate_dir = Path::new(&crate_dir).clone();
    let base_dir = crate_dir.parent().unwrap();

    run_bindgen(base_dir).expect("Failed to run ffigen command!");
}

#[cfg(windows)]
fn run_bindgen(path: &Path) -> io::Result<Output> {
    Command::new("cmd")
        .current_dir(path)
        .args(&["/c", "flutter", "pub", "run", "ffigen"])
        .output()
}

#[cfg(not(windows))]
fn run_bindgen(path: &Path) -> io::Result<Output> {
    Command::new("flutter")
        .current_dir(path)
        .args(&["pub", "run", "ffigen"])
        .output()
}
